import emailjs from "emailjs-com";

const VISITOR_KEY = process.env.REACT_APP_VISITOR_KEY || "website_visits";

// Function to get user's IP and location information (fallback method)
const getUserLocationData = async () => {
  try {
    const response = await fetch("https://ipapi.co/json/");
    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Error fetching location data:", error);
    return null;
  }
};

// Function to collect comprehensive user information
const collectUserInfo = async (geoData = null) => {
  const locationData = await getUserLocationData();

  const userInfo = {
    timestamp: new Date().toISOString(),
    userAgent: navigator.userAgent,
    language: navigator.language,
    languages: navigator.languages?.join(", "),
    platform: navigator.platform,
    cookieEnabled: navigator.cookieEnabled,
    screenWidth: window.screen.width,
    screenHeight: window.screen.height,
    screenColorDepth: window.screen.colorDepth,
    windowWidth: window.innerWidth,
    windowHeight: window.innerHeight,
    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
    referrer: document.referrer || "Direct visit",
    currentUrl: window.location.href,

    // Precise GPS location data (if available)
    gpsLatitude: geoData?.coords?.latitude,
    gpsLongitude: geoData?.coords?.longitude,
    gpsAccuracy: geoData?.coords?.accuracy,
    gpsAltitude: geoData?.coords?.altitude,
    gpsAltitudeAccuracy: geoData?.coords?.altitudeAccuracy,
    gpsHeading: geoData?.coords?.heading,
    gpsSpeed: geoData?.coords?.speed,
    gpsTimestamp: geoData?.timestamp,
    geolocationAvailable: geoData?.isGeolocationAvailable,
    geolocationEnabled: geoData?.isGeolocationEnabled,
    geolocationError: geoData?.positionError?.message,

    // IP-based location data (fallback)
    ip: locationData?.ip,
    city: locationData?.city,
    region: locationData?.region,
    country: locationData?.country_name,
    countryCode: locationData?.country_code,
    ipLatitude: locationData?.latitude,
    ipLongitude: locationData?.longitude,
    timezone_api: locationData?.timezone,
    isp: locationData?.org,
  };

  return userInfo;
};

// Function to send visitor notification email
const sendVisitorNotification = async (userInfo) => {
  try {
    // Determine which location data to use in the email
    const hasGPS = userInfo.gpsLatitude && userInfo.gpsLongitude;
    const locationDisplay = hasGPS
      ? `📍 GPS Location: ${userInfo.gpsLatitude.toFixed(
          6
        )}, ${userInfo.gpsLongitude.toFixed(6)} (±${userInfo.gpsAccuracy}m)`
      : `📍 IP Location: ${userInfo.city}, ${userInfo.region}, ${userInfo.country}`;

    // Create email content
    const emailData = {
      to_email: "your-email@example.com", // Replace with your email
      subject: "🚨 New Website Visitor Alert",
      message: `
🚨 NEW WEBSITE VISITOR DETECTED 🚨

📅 Visit Time: ${userInfo.timestamp}
🌐 Current URL: ${userInfo.currentUrl}
🔗 Referrer: ${userInfo.referrer}

👤 USER INFORMATION:
• User Agent: ${userInfo.userAgent}
• Platform: ${userInfo.platform}
• Language: ${userInfo.language}
• Languages: ${userInfo.languages}
• Cookies Enabled: ${userInfo.cookieEnabled}

📱 DEVICE & SCREEN:
• Screen Resolution: ${userInfo.screenWidth}x${userInfo.screenHeight}
• Window Size: ${userInfo.windowWidth}x${userInfo.windowHeight}
• Color Depth: ${userInfo.screenColorDepth}

🌍 LOCATION INFORMATION:
${locationDisplay}

${
  hasGPS
    ? `
🛰️ GPS DETAILS:
• Accuracy: ±${userInfo.gpsAccuracy} meters
• Altitude: ${userInfo.gpsAltitude || "N/A"} meters
• Heading: ${userInfo.gpsHeading || "N/A"}°
• Speed: ${userInfo.gpsSpeed || "N/A"} m/s
• GPS Timestamp: ${new Date(userInfo.gpsTimestamp).toLocaleString()}
`
    : ""
}

🌐 NETWORK & IP INFO:
• IP Address: ${userInfo.ip}
• City: ${userInfo.city}
• Region: ${userInfo.region}
• Country: ${userInfo.country} (${userInfo.countryCode})
• IP Coordinates: ${userInfo.ipLatitude}, ${userInfo.ipLongitude}
• Timezone: ${userInfo.timezone}
• ISP: ${userInfo.isp}

🔧 GEOLOCATION STATUS:
• Geolocation API Available: ${userInfo.geolocationAvailable ? "Yes" : "No"}
• Geolocation Enabled: ${userInfo.geolocationEnabled ? "Yes" : "No"}
${userInfo.geolocationError ? `• Error: ${userInfo.geolocationError}` : ""}

This email was automatically generated by your website visitor tracking system.
      `,
    };

    // Send email using same configuration as Contact form
    await emailjs.send(
      process.env.REACT_APP_EMAILJS_SERVICE_ID,
      process.env.REACT_APP_EMAILJS_TEMPLATE_ID,
      emailData,
      process.env.REACT_APP_EMAILJS_PUBLIC_KEY
    );

    // console.log("Visitor notification sent successfully:", result);
    return true;
  } catch (error) {
    // console.error("Error sending visitor notification:", error);
    return false;
  }
};

// Flag to prevent multiple simultaneous executions
let isTracking = false;

// Main visitor tracking function - now accepts geolocation data
export const trackVisitor = async (geoData = null) => {
  try {
    // Prevent multiple simultaneous executions
    if (isTracking) {
      return;
    }

    // Check localStorage for visitor key
    const visitorCount = localStorage.getItem(VISITOR_KEY);

    // If key doesn't exist or value is 0, this is a new visitor
    if (!visitorCount || visitorCount === "0") {
      // Set tracking flag immediately to prevent race conditions
      isTracking = true;

      // Double-check localStorage (in case of race condition)
      const doubleCheck = localStorage.getItem(VISITOR_KEY);
      if (doubleCheck && doubleCheck !== "0") {
        isTracking = false;
        return;
      }

      // Set visitor flag immediately to prevent duplicate processing
      localStorage.setItem(VISITOR_KEY, "1");

      //   console.log("New visitor detected, collecting information...");

      // Collect user information (including geolocation if provided)
      const userInfo = await collectUserInfo(geoData);

      // Send notification email
      const emailSent = await sendVisitorNotification(userInfo);

      if (emailSent) {
        // console.log("Visitor tracked and notification sent successfully");
      } else {
        // If email failed, reset the flag so it can be retried later
        localStorage.setItem(VISITOR_KEY, "0");
        // console.error("Failed to send visitor notification");
      }

      isTracking = false;
    } else {
      //   console.log("Returning visitor, no notification sent");
    }
  } catch (error) {
    isTracking = false;
    // console.error("Error in visitor tracking:", error);
  }
};

// Optional: Function to reset visitor tracking (for testing)
export const resetVisitorTracking = () => {
  localStorage.removeItem(VISITOR_KEY);
  // console.log("Visitor tracking reset");
};
